{
  "openapi": "3.0.3",
  "info": {
    "title": "Effect App API",
    "version": "1.0.0",
    "description": "A comprehensive HTTP API built with Effect-TS for managing users, groups, and people",
    "contact": {
      "name": "API Support",
      "email": "support@example.com"
    },
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    },
    {
      "url": "https://api.example.com",
      "description": "Production server"
    }
  ],
  "tags": [
    {
      "name": "accounts",
      "description": "User account management operations"
    },
    {
      "name": "groups",
      "description": "Group management operations"
    },
    {
      "name": "people",
      "description": "People management within groups"
    }
  ],
  "paths": {
    "/accounts/users": {
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Create a new user account",
        "operationId": "createUser",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "User email address"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid email format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailInvalidError"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/users/me": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get current authenticated user",
        "operationId": "getUserMe",
        "responses": {
          "200": {
            "description": "Current user information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "description": "User not authenticated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CurrentUserNotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/users/{id}": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get user by ID",
        "operationId": "getUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "description": "User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "accounts"
        ],
        "summary": "Update user information",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "description": "User ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "format": "email",
                    "description": "Updated email address"
                  }
                },
                "required": [
                  "email"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "Invalid email format",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EmailInvalidError"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserNotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/groups": {
      "post": {
        "tags": [
          "groups"
        ],
        "summary": "Create a new group",
        "operationId": "createGroup",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Group name"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{id}": {
      "put": {
        "tags": [
          "groups"
        ],
        "summary": "Update group information",
        "operationId": "updateGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Group ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Updated group name"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "404": {
            "description": "Group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupNotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/groups/{groupId}/people": {
      "post": {
        "tags": [
          "people"
        ],
        "summary": "Create a new person in a group",
        "operationId": "createPerson",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Group ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "firstName": {
                    "type": "string",
                    "description": "Person's first name"
                  },
                  "lastName": {
                    "type": "string",
                    "description": "Person's last name"
                  },
                  "dateOfBirth": {
                    "type": "string",
                    "format": "date-time",
                    "description": "Person's date of birth (optional)",
                    "nullable": true
                  }
                },
                "required": [
                  "firstName",
                  "lastName"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Person created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "404": {
            "description": "Group not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupNotFoundError"
                }
              }
            }
          }
        }
      }
    },
    "/people/{id}": {
      "get": {
        "tags": [
          "people"
        ],
        "summary": "Get person by ID",
        "operationId": "getPerson",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Person ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Person found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Person"
                }
              }
            }
          },
          "404": {
            "description": "Person not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonNotFoundError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique user identifier"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address"
          },
          "account": {
            "$ref": "#/components/schemas/Account"
          }
        },
        "required": [
          "id",
          "email",
          "account"
        ]
      },
      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique account identifier"
          }
        },
        "required": [
          "id"
        ]
      },
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique group identifier"
          },
          "name": {
            "type": "string",
            "description": "Group name"
          },
          "ownerId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the group owner"
          }
        },
        "required": [
          "id",
          "name",
          "ownerId"
        ]
      },
      "Person": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "Unique person identifier"
          },
          "firstName": {
            "type": "string",
            "description": "Person's first name"
          },
          "lastName": {
            "type": "string",
            "description": "Person's last name"
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time",
            "description": "Person's date of birth",
            "nullable": true
          },
          "groupId": {
            "type": "integer",
            "format": "int32",
            "description": "ID of the group this person belongs to"
          }
        },
        "required": [
          "id",
          "firstName",
          "lastName",
          "groupId"
        ]
      },
      "EmailInvalidError": {
        "type": "object",
        "properties": {
          "_tag": {
            "type": "string",
            "enum": [
              "EmailInvalid"
            ]
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "_tag",
          "message"
        ]
      },
      "UserNotFoundError": {
        "type": "object",
        "properties": {
          "_tag": {
            "type": "string",
            "enum": [
              "UserNotFound"
            ]
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "_tag",
          "message"
        ]
      },
      "CurrentUserNotFoundError": {
        "type": "object",
        "properties": {
          "_tag": {
            "type": "string",
            "enum": [
              "CurrentUserNotFound"
            ]
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "_tag",
          "message"
        ]
      },
      "GroupNotFoundError": {
        "type": "object",
        "properties": {
          "_tag": {
            "type": "string",
            "enum": [
              "GroupNotFound"
            ]
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "_tag",
          "message"
        ]
      },
      "PersonNotFoundError": {
        "type": "object",
        "properties": {
          "_tag": {
            "type": "string",
            "enum": [
              "PersonNotFound"
            ]
          },
          "message": {
            "type": "string",
            "description": "Error message"
          }
        },
        "required": [
          "_tag",
          "message"
        ]
      }
    }
  }
}